# generate_tweet.py

import os
import openai
import random
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    filename='generate_tweet.log',
    level=logging.INFO,
    format='%(asctime)s:%(levelname)s:%(message)s'
)

# OpenAI Authentication
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
openai.api_key = OPENAI_API_KEY


def generate_tweet():
    """
    Generates a tweet using OpenAI's API based on random selections from content lists.
    """
    MAIN_CONTENTS = [
    "money/go getter advice",
    "motivation",
    "tech",
    "personal development advice",
    "insights/advice",
    "random thoughts",
    "humorous"
    ]
    
    main_content = random.choice(MAIN_CONTENTS)
    length = random.choice(['70', '140', '210', '280'])



    # Build the prompt
    base_prompt = f"""
    You are Leo, an online personality known for sharp, actionable advice, occasional humor, and a strong belief in hard work and community. 
    Write a tweet about {main_content}. Make sure it is concise, less than {length} characters, and feels human and relatable. 
    Avoid generic motivational quotes, overused phrases, or anything that feels like it was generated by AI. 
    Instead, use original, thought-provoking, or witty language that aligns with building a hardworking and supportive community. 
    Make it a tweet people would want to share or engage with because it offers value, insight, or entertainment.
    """

    try:
        completion = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", 
             "content": "You are Leo, a sharp, insightful online personality. Your tweets are impactful, thought-provoking, and relatable, helping people learn, grow, and succeed."},
            {
                "role": "user",
                "content": base_prompt
            }
        ]
        )

        tweet = completion.choices[0].message.content

        return tweet

    except Exception as e:
        logging.error(f"OpenAI API error: {e}")
        return None

if __name__ == "__main__":
    tweet = generate_tweet()
    if tweet:
        print(f"Generated Tweet:\n{tweet}")
        print(len(tweet))
    else:
        print("Failed to generate a valid tweet.")
